// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [postgis]
}

model User {
  id            String    @id @default(uuid())
  name          String
  email         String    @unique
  emailVerified DateTime?
  image         String?

  providerProfile ProviderProfile?
  clientProfile   ClientProfile?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Service {
  id          Int     @id @default(autoincrement())
  name        String  @unique
  description String?

  ProviderService ProviderService[]
}

enum ServicesLocation {
  PROVIDER_LOCATION
  CLIENT_HOME
  BOTH
}

model Location {
  id Int @id @default(autoincrement())

  name            String
  coordinates     Unsupported("geography(Point, 4326)")
  providerProfile ProviderProfile?
}

// Perfil para usuarios que ofrecen servicios.
model ProviderProfile {
  id String @id @default(uuid())

  bio                 String?
  yearsOfExperience   Int              @default(0)
  isActive            Boolean          @default(false)
  serviceLocationType ServicesLocation
  address             String?

  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  locationId Int      @unique
  location   Location @relation(fields: [locationId], references: [id], onDelete: Cascade)

  providerAvailability ProviderAvailability[]
  providerService      ProviderService[]
  veterinarianDetails  VeterinarianDetails?
  psychologistDetails  PsychologistDetails?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([locationId])
}

// Vincula un proveedor con un servicio espec√≠fico que ofrece.
model ProviderService {
  id String @id @default(uuid())

  providerProfileId String
  providerProfile   ProviderProfile @relation(fields: [providerProfileId], references: [id], onDelete: Cascade)

  serviceId Int
  services  Service @relation(fields: [serviceId], references: [id], onDelete: Cascade)

  priceFrom Int
  priceTo   Int

  isAvailable Boolean       @default(true)
  appointment Appointment[]

  @@unique([providerProfileId, serviceId])
}

model VeterinarianDetails {
  id String @id @default(uuid())

  providerProfileId String          @unique
  providerProfile   ProviderProfile @relation(fields: [providerProfileId], references: [id], onDelete: Cascade)

  licenceNumber String
  specialties   String[]
}

model PsychologistDetails {
  id String @id @default(uuid())

  providerProfileId String          @unique
  providerProfile   ProviderProfile @relation(fields: [providerProfileId], references: [id], onDelete: Cascade)

  licenseNumber         String
  therapeuticApproaches String[]
}

model ClientProfile {
  id String @id @default(uuid())

  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  appointment Appointment[]

  createdAt DateTime @default(now())
}

enum AppointmentStatus {
  PENDING
  CONFIRMED
  COMPLETED
  CANCELLED_BY_CLIENT
  CANCELLED_BY_PROVIDER
}

model Appointment {
  id String @id @default(uuid())

  clientProfileId String
  clientProfile   ClientProfile @relation(fields: [clientProfileId], references: [id], onDelete: Cascade)

  providerServiceId String
  providerService   ProviderService @relation(fields: [providerServiceId], references: [id], onDelete: Cascade)

  appointmentTime  DateTime
  status           AppointmentStatus @default(PENDING)
  priceAtBooking   Int
  notesForProvider String

  review Review?

  createdAt DateTime @default(now())
}

model Review {
  id String @id @default(uuid())

  appointmentId String      @unique
  appointment   Appointment @relation(fields: [appointmentId], references: [id], onDelete: Cascade)

  rating    Int
  comment   String?
  createdAt DateTime @default(now())
}

enum DayOfWeek {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

model ProviderAvailability {
  id Int @default(autoincrement())

  providerProfileId String
  providerProfile   ProviderProfile @relation(fields: [providerProfileId], references: [id], onDelete: Cascade)

  day       DayOfWeek
  startTime DateTime
  endTime   DateTime

  @@unique([providerProfileId, day, startTime, endTime])
}
